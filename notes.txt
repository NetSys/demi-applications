TODO(cs): probably need to serialize event traces to disk if we're going to be
          doing heavy-duty fuzz testing.
TODO(cs): fingerprints for Raft.
TODO(cs): do we handle context.system.eventStream.publish properly? It's
          apparently only a local facility, not a cluster facility.
TODO(cs): raise exception if any of the other scheduler.schedule methods are
          called.
TODO(cs): should we be testing the cluster versions of the actors?
TODO(cs): double check: does akka-raft write anything to disk? Sort of seems
          like it doesn't support crash-recovery.. In fact, it doesn't make
          use of any of akka's persistence module...
TODO(cs): interpose on random? Used to generate Raft's timer values.
          Otherwise, our "prefix produces same state" assumption breaks.


Looks there are two uses of timers here:
  - cluster/ClusterRaftActor.scala uses schedule.scheduleOnce(), but I don't
    think it's actually crucial to the protocol. Looks like it's just used for
    cluster membership discovery.

    context.system.scheduler.scheduleOnce(identifyTimeout, self, onIdentityTimeout)

  - LoggingFSM.setTimer (part of the Akka) is used for heartbeats, etc.
    repeat is set to both true (for Leader) and false (for RaftActor)

  setTimer implementation:

  private[akka] case class Timer(name: String, msg: Any, repeat: Boolean, generation: Int)(context: ActorContext)
    extends NoSerializationVerificationNeeded {
    private var ref: Option[Cancellable] = _
    private val scheduler = context.system.scheduler
    private implicit val executionContext = context.dispatcher

    def schedule(actor: ActorRef, timeout: FiniteDuration): Unit =
      ref = Some(
        if (repeat) scheduler.schedule(timeout, timeout, actor, this)
        else scheduler.scheduleOnce(timeout, actor, this))


  So, the two scheduler interfaces used are:
    - scheduleOnce (delay: Duration, receiver: ActorRef, message: Any): Cancellable
    - schedule (initialDelay: Duration, frequency: Duration, receiver:ActorRef, message: Any): Cancellable
