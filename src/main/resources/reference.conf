akka {

  # Define the `akka.cluster.roles` property on nodes that should be part of the raft deployment.
  # This is useful when for example you have a large cluster, but only want to run raft on a selected subset of the nodes.
  # akka.cluster.roles = [ "raft" ]

  extensions = [
    "pl.project13.scala.akka.raft.compaction.LogCompactionExtension"
  ]

  raft {

    # Election timeout is the time, in which if a Follower doesn't hear a Hearbeat from the Leader,
    # it will decide to become a Candidate and start a new election in order to become the new Leader.
    # Tweaking these values may help increase your clusters stability and lessen network noise.
    # Default values are as suggested in the Raft whitepaper 150ms ~ 300ms.
    # The efficient timeout will be randomized from within this range.
    election-timeout {
      min = 150 ms
      max = 300 ms
    }

    # Interval between sending heartbeats to Followers (by the Leader).
    # Lowering the interval produces more network traffic, but can help making the Followers not start elections,
    # while the current Leader is still perfectly fine.
    # Note: Keep this value > than election-timeout.min, otherwise followers will keep starting new elections all the time!
    heartbeat-interval = 50 ms

    # When propagating entries among members, AppendEntries can carry multiple log entries.
    # Use this value to tweak this number as it depends on the characteristics of your Commands.
    default-append-entries-batch-size = 5

    # When turned on, will push events like "entry 1 committed" onto the eventStream, mostly designed for testing,
    # do not rely on these messages in real systems.
    publish-testing-events = off

    # Implementation of Log Compaction (extension)
    # Default implementation uses plain java serialization, and should be enough for most uses.
    log-compaction-impl = "pl.project13.scala.akka.raft.compaction.DefaultLogCompactionSupport"


    cluster {
      auto-discovery {
        # In clustered raft mode, ClusterRaftActor will look for raft members on nodes that join the cluster
        # This setting defines how many times it will ask the node about raft members present on it if it does not get any reply.
        # Please note that "None" is a valid answer, and will stop the ClusterRaftActor from asking again.
        retry-count = 10

        # During clustered startup, how long of a pause between asking Identify, and a Node's reply do we already consider worth retrying?
        identify-timeout = 3 s
      }
    }
  }
}

raft-dispatcher {
  type = Dispatcher

  executor = "fork-join-executor"

  fork-join-executor {
    parallelism-min = 2
    parallelism-factor = 2.0
    parallelism-max = 5
  }
  throughput = 1
}

raft-client-dispatcher {
  type = Dispatcher

  executor = "fork-join-executor"

  fork-join-executor {
    parallelism-min = 2
    parallelism-factor = 2.0
    parallelism-max = 5
  }
  throughput = 1
}
